// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/gRc.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// trAW_
double trAW_(NumericMatrix rA, NumericMatrix rW);
static SEXP _gRc_trAW__try(SEXP rASEXP, SEXP rWSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rA(rASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rW(rWSEXP);
    rcpp_result_gen = Rcpp::wrap(trAW_(rA, rW));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRc_trAW_(SEXP rASEXP, SEXP rWSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRc_trAW__try(rASEXP, rWSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// trAWB_
double trAWB_(NumericMatrix rA, NumericMatrix rW, NumericMatrix rB);
static SEXP _gRc_trAWB__try(SEXP rASEXP, SEXP rWSEXP, SEXP rBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rA(rASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rW(rWSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rB(rBSEXP);
    rcpp_result_gen = Rcpp::wrap(trAWB_(rA, rW, rB));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRc_trAWB_(SEXP rASEXP, SEXP rWSEXP, SEXP rBSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRc_trAWB__try(rASEXP, rWSEXP, rBSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// trAWBW_
double trAWBW_(NumericMatrix rA, NumericMatrix rW, NumericMatrix rB);
static SEXP _gRc_trAWBW__try(SEXP rASEXP, SEXP rWSEXP, SEXP rBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rA(rASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rW(rWSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rB(rBSEXP);
    rcpp_result_gen = Rcpp::wrap(trAWBW_(rA, rW, rB));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRc_trAWBW_(SEXP rASEXP, SEXP rWSEXP, SEXP rBSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRc_trAWBW__try(rASEXP, rWSEXP, rBSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// trAWBV_
double trAWBV_(NumericMatrix rA, NumericMatrix rW, NumericMatrix rB, NumericMatrix rV);
static SEXP _gRc_trAWBV__try(SEXP rASEXP, SEXP rWSEXP, SEXP rBSEXP, SEXP rVSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rA(rASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rW(rWSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rB(rBSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rV(rVSEXP);
    rcpp_result_gen = Rcpp::wrap(trAWBV_(rA, rW, rB, rV));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRc_trAWBV_(SEXP rASEXP, SEXP rWSEXP, SEXP rBSEXP, SEXP rVSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRc_trAWBV__try(rASEXP, rWSEXP, rBSEXP, rVSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// trAWBlist_
NumericVector trAWBlist_(List Alist, NumericMatrix W, List Blist, int mode);
static SEXP _gRc_trAWBlist__try(SEXP AlistSEXP, SEXP WSEXP, SEXP BlistSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type Alist(AlistSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< List >::type Blist(BlistSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(trAWBlist_(Alist, W, Blist, mode));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRc_trAWBlist_(SEXP AlistSEXP, SEXP WSEXP, SEXP BlistSEXP, SEXP modeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRc_trAWBlist__try(AlistSEXP, WSEXP, BlistSEXP, modeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// trAWBWlist_
NumericVector trAWBWlist_(List Alist, NumericMatrix W, List Blist, int mode);
static SEXP _gRc_trAWBWlist__try(SEXP AlistSEXP, SEXP WSEXP, SEXP BlistSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type Alist(AlistSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< List >::type Blist(BlistSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(trAWBWlist_(Alist, W, Blist, mode));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRc_trAWBWlist_(SEXP AlistSEXP, SEXP WSEXP, SEXP BlistSEXP, SEXP modeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRc_trAWBWlist__try(AlistSEXP, WSEXP, BlistSEXP, modeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _gRc_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*trAW_)(NumericMatrix,NumericMatrix)");
        signatures.insert("double(*trAWB_)(NumericMatrix,NumericMatrix,NumericMatrix)");
        signatures.insert("double(*trAWBW_)(NumericMatrix,NumericMatrix,NumericMatrix)");
        signatures.insert("double(*trAWBV_)(NumericMatrix,NumericMatrix,NumericMatrix,NumericMatrix)");
        signatures.insert("NumericVector(*trAWBlist_)(List,NumericMatrix,List,int)");
        signatures.insert("NumericVector(*trAWBWlist_)(List,NumericMatrix,List,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _gRc_RcppExport_registerCCallable() { 
    R_RegisterCCallable("gRc", "_gRc_trAW_", (DL_FUNC)_gRc_trAW__try);
    R_RegisterCCallable("gRc", "_gRc_trAWB_", (DL_FUNC)_gRc_trAWB__try);
    R_RegisterCCallable("gRc", "_gRc_trAWBW_", (DL_FUNC)_gRc_trAWBW__try);
    R_RegisterCCallable("gRc", "_gRc_trAWBV_", (DL_FUNC)_gRc_trAWBV__try);
    R_RegisterCCallable("gRc", "_gRc_trAWBlist_", (DL_FUNC)_gRc_trAWBlist__try);
    R_RegisterCCallable("gRc", "_gRc_trAWBWlist_", (DL_FUNC)_gRc_trAWBWlist__try);
    R_RegisterCCallable("gRc", "_gRc_RcppExport_validate", (DL_FUNC)_gRc_RcppExport_validate);
    return R_NilValue;
}
